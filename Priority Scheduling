#include <stdio.h>

void priorityScheduling(int n, int pid[], int burst[], int priority[], int arrival[]) {
    // Sort processes by priority (lower number = higher priority)
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (priority[j] > priority[j + 1]) {
                // Swap all arrays to keep data consistent
                int temp = pid[j];
                pid[j] = pid[j + 1];
                pid[j + 1] = temp;
                
                temp = burst[j];
                burst[j] = burst[j + 1];
                burst[j + 1] = temp;
                
                temp = priority[j];
                priority[j] = priority[j + 1];
                priority[j + 1] = temp;
                
                temp = arrival[j];
                arrival[j] = arrival[j + 1];
                arrival[j + 1] = temp;
            }
        }
    }
    
    int completion[n], turnaround[n], waiting[n];
    int current_time = 0;
    
    printf("\nPID\tArrival\tBurst\tPriority\tCompletion\tTurnaround\tWaiting\n");
    
    for (int i = 0; i < n; i++) {
        // Calculate completion time
        completion[i] = (arrival[i] > current_time) ? arrival[i] + burst[i] : current_time + burst[i];
        current_time = completion[i];
        
        // Calculate turnaround and waiting times using given formulas
        turnaround[i] = completion[i] - arrival[i];  // TAT = CT - AT
        waiting[i] = turnaround[i] - burst[i];       // WT = TAT - BT
        
        printf("%d\t%d\t%d\t%d\t\t%d\t\t%d\t\t%d\n", 
               pid[i], arrival[i], burst[i], priority[i], 
               completion[i], turnaround[i], waiting[i]);
    }
}

int main() {
    int n;
    printf("Enter number of processes: ");
    scanf("%d", &n);
    
    int pid[n], burst[n], priority[n], arrival[n];
    
    for (int i = 0; i < n; i++) {
        pid[i] = i + 1;
        printf("\nEnter details for process %d:\n", pid[i]);
        printf("Arrival time: ");
        scanf("%d", &arrival[i]);
        printf("Burst time: ");
        scanf("%d", &burst[i]);
        printf("Priority (lower number = higher priority): ");
        scanf("%d", &priority[i]);
    }
    
    priorityScheduling(n, pid, burst, priority, arrival);
    
    return 0;
}
